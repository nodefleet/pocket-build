# This Dockerfile attempts to install dependencies, run the tests and build the pocket-core binary
# The result of this Dockerfile will put the pocket-core executable in the $GOBIN/bin, which in turn
# is part of the $PATH

# Dynamically pull Go-lang version for the image
ARG GOLANG_IMAGE_VERSION=golang:1.18.0-alpine3.15

# First build step to build the app binary
FROM ${GOLANG_IMAGE_VERSION} AS builder

# Install dependencies
RUN apk -v --update --no-cache add \
	curl \
	git \
	groff \
	less \
	mailcap \
	gcc \
    openssh \
	libc-dev \
	bash  \
	leveldb-dev && \
	rm /var/cache/apk/* || true

# Environment and system dependencies setup
ENV POCKET_PATH=/go/src/github.com/pokt-network/pocket-core/
ENV TENDERMINT_PATH=/go/src/github.com/pokt-network/tendermint/

ENV GO111MODULE="on"

# Create node root directory
RUN mkdir -p ${POCKET_PATH} ${TENDERMINT_PATH} ~/.ssh/
RUN ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
WORKDIR $POCKET_PATH

# Creating the BRANCH_NAME variable
ARG BRANCH_NAME="${BRANCH_NAME}"
ARG COMMIT="$COMMIT"
ARG REPO="$REPO"
ARG TENDERMINT_REPO="${TENDERMINT_REPO}"
ARG TENDERMINT_BRANCH_NAME="${TENDERMINT_BRANCH_NAME}"
# Copying deps sh to tmp folder
COPY deps.sh /tmp/
RUN echo "Building from $REPO branch: $BRANCH_NAME"
COPY key /tmp/key
# Clone the repository
RUN echo "Cloning repo"
RUN cp /tmp/key ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa && eval `ssh-agent` && ssh-add ~/.ssh/id_rsa && git clone --branch ${BRANCH_NAME} ${REPO} ${POCKET_PATH} && cd ${POCKET_PATH} && git log -n 1 ${BRANCH_NAME} 
RUN echo "Building from $TENDERMINT_REPO branch: $TENDERMINT_BRANCH_NAME"
RUN git clone  ${TENDERMINT_REPO} ${TENDERMINT_PATH} && cd ${TENDERMINT_PATH} && git log -n 1 && cd .. 




#RUN cp /tmp/key ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa && eval `ssh-agent` && ssh-add ~/.ssh/id_rsa && git clone --branch ${BRANCH_NAME} ${REPO} ${POCKET_PATH} && cd ${POCKET_PATH} && echo "${COMMIT}" && git checkout ${COMMIT} && echo "USING COMMIT" && git rev-parse HEAD 

# Install rest of source code
COPY . .

# Run tests
# As the tests were removed recently for the fact that most of them were broken, I commented this line,
# It should be uncommented as soon as the new tests are available
RUN pwd
RUN ls
#RUN go test -short -v -p 1 ./...

RUN ls
#build tendermint
RUN chmod 654 go.mod.tendermint && cp go.mod.tendermint ${TENDERMINT_PATH}go.mod
RUN chmod 654 go.mod.local && cp go.mod.local ${POCKET_PATH}go.mod

RUN cd ${TENDERMINT_PATH}  && ls && pwd && go mod download 
RUN cd ${POCKET_PATH}  && ls && pwd && go mod download 

# Install project dependencies and builds the binary
RUN go mod tidy && go build -tags cleveldb -o ${GOPATH}/bin/pocket ./app/cmd/pocket_core/main.go

RUN cp $TENDERMINT_PATH/go.mod $POCKET_ROOT/go.mod.tendermint
RUN cp $POCKET_PATH/go.mod $POCKET_ROOT/go.mod.core 

# Second build step: reduce image size to only use app binary
# Should summarize
#FROM alpine:3.15

#COPY --from=builder /bin/pocket /bin/pocket
COPY entrypoint.sh /tmp/
RUN apk add --update --no-cache expect bash leveldb-dev
RUN apk add --no-cache tzdata && cp /usr/share/zoneinfo/America/New_York  /etc/localtime
# Create app user and add permissions
RUN addgroup --gid 1001 -S app \
	&& adduser --uid 1005 -S -G app app
RUN mv /tmp/entrypoint.sh /home/app/   && mkdir -p /home/app/.pocket/config && chown -R app /home/app/.pocket && chown -R app $POCKET_PATH 

USER app
WORKDIR $POCKET_PATH

ENTRYPOINT ["/usr/bin/expect", "/home/app/entrypoint.sh"]
